#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"

layout(location = 0) rayPayloadEXT IndirectGbufferRayPayload indirectRpl;
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;

IndirectGbufferRayPayload shootRay(vec3 orig, vec3 dir)
{
    uint  rayFlags = gl_RayFlagsOpaqueEXT;

    traceRayEXT(topLevelAS, // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            orig.xyz,       // ray origin
            1e-3,           // ray min range
            dir.xyz,         // ray direction
            1.0e38f,           // ray max range
            0      // payload (location = 0)
    );   

	// Return the color we got from our ray
	return indirectRpl;
};

#define M_PI     3.14159265358979323846

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };

layout(set = 2, binding = 0, rgba32f) uniform image2D ptOutput;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

	vec4 origin    = giParams.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = giParams.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = giParams.viewInverse * vec4(normalize(target.xyz), 0);

	// Initialize path tracing data
	vec3 radiance = vec3(0.0f, 0.0f, 0.0f);
	vec3 throughput = vec3(1.0f, 1.0f, 1.0f);

	for (int bounce = 0; bounce < giParams.numRays; bounce++) 
	{
		IndirectGbufferRayPayload payload = shootRay(origin.xyz, direction.xyz);

		if (payload.position_objectID.w > -1e3)
		{
			radiance = payload.albedo_metalness.xyz / M_PI;
		}
	}


	imageStore(ptOutput, ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.));
}
