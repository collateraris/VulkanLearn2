#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"
#include "vbuffer.h"

layout(location = 0) rayPayloadEXT IndirectRayPayload indirectRpl;
layout(location = 1) rayPayloadEXT AORayPayload aoRpl;

layout (set = 0, std140, binding = 0) readonly buffer _vertices
{
	SVertex vertices[];
} Vertices[];

layout(set = 0, binding = 1) uniform sampler2D texSet[];
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, std140, binding = 3) readonly buffer ObjectBuffer{

	SObjectData objects[];
} objectBuffer;

layout (set = 0, binding = 4) readonly buffer _meshlets
{
	SMeshlet meshlets[];
} Meshlet[];

layout(set = 0, binding = 5) readonly buffer _meshletData
{
	uint meshletData[];
} MeshletData[];

layout(set = 0, std140, binding = 6) readonly buffer _Lights{

	SLight lights[];
} lightsBuffer;

layout(set = 0, binding = 8) uniform samplerCube irradianceMap;
layout(set = 0, binding = 9) uniform samplerCube prefilteredMap;
layout(set = 0, binding = 10) uniform sampler2D   brdfLUT;

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };
layout(set = 1, binding = 1, rg32ui) uniform  readonly uimage2D vbufferTex;

layout(set = 2, binding = 0, rgba16f) uniform image2D reflectionOutput;

#include "gi_raytrace_func.h"

#define ROUGHNESS_CUTOFF 0.6f

void main() 
{
    const vec2 uv = vec2(gl_LaunchIDEXT.xy)/vec2(gl_LaunchSizeEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

    uvec3 objectID_meshletsID_primitiveID = unpackVBuffer(imageLoad(vbufferTex, ivec2(gl_LaunchIDEXT.xy)).xy);
    float objIDf = float(objectID_meshletsID_primitiveID.x) - 1.f;

    vec4 reflectionColor = vec4(0.f, 0.f, 0.f, 1.f);

    if (objIDf >= 0.)
	{
        vec2 ndc = uv * 2.0 - 1.0;

        VbufferExtraCommonData vbufferData = proccessVbufferData(objectID_meshletsID_primitiveID, giParams.projView, ndc, gl_LaunchSizeEXT.xy, giParams.camPos.xyz);

        vec3 worldPos = vbufferData.worldPos;
        vec3 worldNorm = vbufferData.worldNorm;
        vec2 uvCoord = vbufferData.uvCoord;

        // Initialize a random seed, per-pixel, based on a screen position and temporally varying count
	    uint randSeed = initRand(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, giParams.frameCount);

        DirectInputData inputData = packDirectInputData(objIDf, worldPos.xyz, worldNorm, uvCoord);
        PBRShadeData prbSD = getShadeData(inputData);

        if (prbSD.emission_roughness.w < ROUGHNESS_CUTOFF)
        {

            vec3 viewDir = normalize(worldPos.xyz - giParams.camPos.xyz);
            vec3 H = getGGXMicrofacet(randSeed, prbSD.emission_roughness.w, worldNorm.xyz);
            vec3 R = normalize(reflect(viewDir, H));

            // Check to make sure our randomly selected, normal mapped diffuse ray didn't go below the surface
            if (dot(worldNorm.xyz, R) >= 0)
            {
                IndirectRayPayload indirPayload =  shootIndirectRay(worldPos.xyz, R);

                int objectId = unpackObjID_IndirectRayPayload(indirPayload);
                if (objectId <= 0)
                {
                    vec3 F0 = vec3(0.04); 
                    F0  = mix(F0, prbSD.albedo_metalness.xyz, prbSD.albedo_metalness.w);
                    float NdotV = max(dot(worldNorm.xyz, viewDir), 0.0);
                    vec3 fresnel = fresnelSchlickRoughness(NdotV, F0, prbSD.emission_roughness.w);
                    reflectionColor.xyz = 0.25f * fresnel * texture(prefilteredMap, R).rgb;
                }
            }
        }
	}


    imageStore(reflectionOutput, ivec2(gl_LaunchIDEXT.xy), reflectionColor);
}
