#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"
#include "vbuffer.h"

layout(location = 0) rayPayloadEXT IndirectRayPayload indirectRpl;
layout(location = 1) rayPayloadEXT AORayPayload aoRpl;

layout (set = 0, std140, binding = 0) readonly buffer _vertices
{
	SVertex vertices[];
} Vertices[];

layout(set = 0, binding = 1) uniform sampler2D texSet[];
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, std140, binding = 3) readonly buffer ObjectBuffer{

	SObjectData objects[];
} objectBuffer;

layout (set = 0, binding = 4) readonly buffer _meshlets
{
	SMeshlet meshlets[];
} Meshlet[];

layout(set = 0, binding = 5) readonly buffer _meshletData
{
	uint meshletData[];
} MeshletData[];

layout(set = 0, std140, binding = 6) readonly buffer _Lights{

	SLight lights[];
} lightsBuffer;

layout(set = 0, binding = 9) uniform samplerCube prefilteredMap;

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };

layout(set = 1, binding = 1, rgba32ui) uniform  readonly uimage2D vbufferTex;

layout(set = 2, binding = 0, rgba16f) uniform readonly image2D reservoir_DI_Spatial;
layout(set = 2, binding = 1, rgba16f) uniform image2D reservoir_DI_Prev;
layout(set = 2, binding = 2, rgba16f) uniform image2D outputTex;

layout(set = 2, binding = 3, rgba16f) uniform readonly image2D reservoir_GI_Spatial;
layout(set = 2, binding = 4, rgba16f) uniform readonly image2D indirectLoSpatialInput;
layout(set = 2, binding = 5, rgba32f) uniform readonly image2D giSamplesPosSpatialInput;
layout(set = 2, binding = 6, rgba32f) uniform readonly image2D giSamplesNormSpatialInput;

layout(set = 2, binding = 7, rgba16f) uniform image2D reservoir_GI_Prev;
layout(set = 2, binding = 8, rgba16f) uniform image2D indirectLoPrevOutput;
layout(set = 2, binding = 9, rgba32f) uniform image2D giSamplesPosPrevOutput;
layout(set = 2, binding = 10, rgba32f) uniform image2D giSamplesNormPrevOutput;

layout(set = 2, binding = 11, rgba16f) uniform readonly image2D reflectionInput;

#include "gi_raytrace_func.h"

void main() 
{
    const vec2 uv = vec2(gl_LaunchIDEXT.xy)/vec2(gl_LaunchSizeEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
        
    uvec3 objectID_meshletsID_primitiveID = unpackVBuffer(imageLoad(vbufferTex, ivec2(gl_LaunchIDEXT.xy)).xy);
    float objIDf = float(objectID_meshletsID_primitiveID.x) - 1.f;

    vec4 reservoir =  imageLoad(reservoir_DI_Spatial, ivec2(gl_LaunchIDEXT.xy));
	imageStore(reservoir_DI_Prev, ivec2(gl_LaunchIDEXT.xy), reservoir);

	vec4 sceneColor = vec4(0.f, 0.f, 0.f, 0.f);

    if (objIDf >= 0.)
	{
        vec2 ndc = uv * 2.0 - 1.0;

        VbufferExtraCommonData vbufferData = proccessVbufferData(objectID_meshletsID_primitiveID, giParams.projView, ndc, gl_LaunchSizeEXT.xy, giParams.camPos.xyz);

        vec3 worldPos = vbufferData.worldPos;
        vec3 worldNorm = vbufferData.worldNorm;
        vec2 uvCoord = vbufferData.uvCoord;

        // Initialize a random seed, per-pixel, based on a screen position and temporally varying count
	    uint randSeed = initRand(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, giParams.frameCount);

        DirectInputData inputData = packDirectInputData(objIDf, worldPos.xyz, worldNorm, uvCoord);

        uint lightToSample = uint(reservoir.y);
        PBRShadeData prbSD = getShadeData(inputData);
        DirectOutputData outputCurrentData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, true);
        sceneColor += vec4(unpackLo_DirectOutputData(outputCurrentData) * reservoir.w, 1.f);


        reservoir =  imageLoad(reservoir_GI_Spatial, ivec2(gl_LaunchIDEXT.xy));
        vec4 Lo = imageLoad(indirectLoSpatialInput, ivec2(gl_LaunchIDEXT.xy));
        vec4 giSamplesPos = imageLoad(giSamplesPosSpatialInput, ivec2(gl_LaunchIDEXT.xy));
        vec4 giSamplesNorm = imageLoad(giSamplesNormSpatialInput, ivec2(gl_LaunchIDEXT.xy));

        imageStore(reservoir_GI_Prev, ivec2(gl_LaunchIDEXT.xy), reservoir);
        imageStore(indirectLoPrevOutput, ivec2(gl_LaunchIDEXT.xy), Lo);
        imageStore(giSamplesPosPrevOutput, ivec2(gl_LaunchIDEXT.xy), giSamplesPos);
        imageStore(giSamplesNormPrevOutput, ivec2(gl_LaunchIDEXT.xy), giSamplesNorm);

        uint bRestirGI_ON = giParams.mode & (1u << 1);
        if (bRestirGI_ON > 0 && reservoir.w > 0)
        {
            vec3 wi = normalize(giSamplesPos.xyz - worldPos);
            sceneColor.xyz = abs(dot(wi, giSamplesNorm.xyz)) * Lo.xyz * reservoir.w;
        }
        else if (bRestirGI_ON == 0)
        {
            sceneColor.xyz += Lo.xyz;
        }

        sceneColor.xyz += imageLoad(reflectionInput, ivec2(gl_LaunchIDEXT.xy)).xyz;
	}
    else
    {
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;
        
        vec4 origin    = giParams.viewInverse * vec4(0, 0, 0, 1);
        vec4 target    = giParams.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = normalize(giParams.viewInverse * vec4(normalize(target.xyz), 0));
        sceneColor.xyz = texture(prefilteredMap, direction.xyz).rgb;
    }

	imageStore(outputTex, ivec2(gl_LaunchIDEXT.xy), sceneColor);
}
