#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"
#include "vbuffer.h"

layout(location = 0) rayPayloadEXT IndirectRayPayload indirectRpl;
layout(location = 1) rayPayloadEXT AORayPayload aoRpl;

layout (set = 0, std140, binding = 0) readonly buffer _vertices
{
	SVertex vertices[];
} Vertices[];

layout(set = 0, binding = 1) uniform sampler2D texSet[];
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, std140, binding = 3) readonly buffer ObjectBuffer{

	SObjectData objects[];
} objectBuffer;

layout (set = 0, binding = 4) readonly buffer _meshlets
{
	SMeshlet meshlets[];
} Meshlet[];

layout(set = 0, binding = 5) readonly buffer _meshletData
{
	uint meshletData[];
} MeshletData[];

layout(set = 0, std140, binding = 6) readonly buffer _Lights{

	SLight lights[];
} lightsBuffer;

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };

layout(set = 1, binding = 1, rgba32ui) uniform  readonly uimage2D vbufferTex;

layout(set = 2, binding = 0) uniform sampler2D indirectInput;
layout(set = 2, binding = 1) uniform sampler2D reservoir_DI_Spatial;
layout(set = 2, binding = 2, rgba16f) uniform image2D reservoir_DI_Prev;
layout(set = 2, binding = 3, rgba16f) uniform image2D outputTex;


#include "gi_raytrace_func.h"

void main() 
{
    const vec2 uv = vec2(gl_LaunchIDEXT.xy)/vec2(gl_LaunchSizeEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
        
    uvec3 objectID_meshletsID_primitiveID = unpackVBuffer(imageLoad(vbufferTex, ivec2(gl_LaunchIDEXT.xy)).xy);
    float objIDf = float(objectID_meshletsID_primitiveID.x) - 1.f;

    vec4 reservoir =  texture(reservoir_DI_Spatial, uv).rgba;
	imageStore(reservoir_DI_Prev, ivec2(gl_LaunchIDEXT.xy), reservoir);

	vec4 indirectColor = texture(indirectInput, uv).rgba;

    if (objIDf >= 0.)
	{
        vec2 ndc = uv * 2.0 - 1.0;

        VbufferExtraCommonData vbufferData = proccessVbufferData(objectID_meshletsID_primitiveID, giParams.projView, ndc, gl_LaunchSizeEXT.xy);

        vec3 worldPos = vbufferData.worldPos;
        vec3 worldNorm = vbufferData.worldNorm;
        vec2 uvCoord = vbufferData.uvCoord;

        // Initialize a random seed, per-pixel, based on a screen position and temporally varying count
	    uint randSeed = initRand(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, giParams.frameCount);

        DirectInputData inputData = packDirectInputData(objIDf, worldPos.xyz, worldNorm, uvCoord);

        uint lightToSample = uint(reservoir.y);
        PBRShadeData prbSD = getShadeData(inputData);
        DirectOutputData outputCurrentData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, true);
        indirectColor += vec4(float(giParams.lightsCount) * unpackLo_DirectOutputData(outputCurrentData) * reservoir.w, 1.f);
	}

	imageStore(outputTex, ivec2(gl_LaunchIDEXT.xy), indirectColor);
}
