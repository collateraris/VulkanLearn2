#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"
#include "vbuffer.h"

layout(location = 0) rayPayloadEXT IndirectRayPayload indirectRpl;
layout(location = 1) rayPayloadEXT AORayPayload aoRpl;

layout (set = 0, std140, binding = 0) readonly buffer _vertices
{
	SVertex vertices[];
} Vertices[];

layout(set = 0, binding = 1) uniform sampler2D texSet[];
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, std140, binding = 3) readonly buffer ObjectBuffer{

	SObjectData objects[];
} objectBuffer;

layout (set = 0, binding = 4) readonly buffer _meshlets
{
	SMeshlet meshlets[];
} Meshlet[];

layout(set = 0, binding = 5) readonly buffer _meshletData
{
	uint meshletData[];
} MeshletData[];

layout(set = 0, std140, binding = 6) readonly buffer _Lights{

	SLight lights[];
} lightsBuffer;

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };

layout(set = 1, binding = 1, rg32ui) uniform  readonly uimage2D vbufferTex;

layout(set = 2, binding = 0, rgba16f) uniform  readonly image2D reservoir_GI_Curr;
layout(set = 2, binding = 1, rgba16f) uniform  readonly image2D indirectLoCurrInput;
layout(set = 2, binding = 2, rgba32f) uniform  readonly image2D giSamplesPosCurrInput;
layout(set = 2, binding = 3, rgba32f) uniform  readonly image2D giSamplesNormCurrInput;

layout(set = 2, binding = 4, rgba16f) uniform image2D reservoir_GI_Spatial;
layout(set = 2, binding = 5, rgba16f) uniform image2D indirectLoSpatialOutput;
layout(set = 2, binding = 6, rgba32f) uniform image2D giSamplesPosSpatialOutput;
layout(set = 2, binding = 7, rgba32f) uniform image2D giSamplesNormSpatialOutput;

#include "gi_raytrace_func.h"

void main() 
{
    const vec2 uv = vec2(gl_LaunchIDEXT.xy)/vec2(gl_LaunchSizeEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

	vec4 reservoirNew = imageLoad(reservoir_GI_Curr, ivec2(gl_LaunchIDEXT.xy));
	vec4 Lo = imageLoad(indirectLoCurrInput, ivec2(gl_LaunchIDEXT.xy));
    vec4 giSamplesPos = imageLoad(giSamplesPosCurrInput, ivec2(gl_LaunchIDEXT.xy));
    vec4 giSamplesNorm = imageLoad(giSamplesNormCurrInput, ivec2(gl_LaunchIDEXT.xy));

    uvec3 objectID_meshletsID_primitiveID = unpackVBuffer(imageLoad(vbufferTex, ivec2(gl_LaunchIDEXT.xy)).xy);
    float objIDf = float(objectID_meshletsID_primitiveID.x) - 1.f;

    vec3 indirectColor = vec3(0.f, 0.f, 0.f);

	uint bRestirGI_ON = giParams.mode & (1u << 1);
	uint bRestirGI_SpacialReuse_ON = giParams.mode & (1u << 3);	

    if (bRestirGI_SpacialReuse_ON > 0 && bRestirGI_ON > 0 && length(giSamplesNorm.xyz) != 0 && objIDf >= 0.)
	{
        vec2 ndc = uv * 2.0 - 1.0;

        VbufferExtraCommonData vbufferData = proccessVbufferData(objectID_meshletsID_primitiveID, giParams.projView, ndc, gl_LaunchSizeEXT.xy, giParams.camPos.xyz);

        vec3 worldPos = vbufferData.worldPos;
		vec3 worldNorm = vbufferData.worldNorm;	

        // Initialize a random seed, per-pixel, based on a screen position and temporally varying count
	    uint randSeed = initRand(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, giParams.frameCount);

        // Reservoir reminder:
        // .x: weight sum
        // .y: chosen light for the pixel
        // .z: the number of samples seen for this current light
        // .w: the final adjusted weight for the current pixel following the formula in algorithm 3 (r.W)
        vec4 reservoir = reservoirNew;
		reservoirNew = vec4(0.f, 0.f, 0.f, 0.f);
		
        // target_pdf of the light is f * Le * G / pdf
        float target_pdf = length(Lo.xyz);
		float weight = target_pdf * reservoir.w * reservoir.z;
        
        reservoirNew.x += weight;
        reservoirNew.z += 1.f;

        vec4 giSamplesPos_New = vec4(0.f, 0.f, 0.f, 0.f);
        vec4 giSamplesNorm_New = vec4(0.f, 0.f, 0.f, 0.f);   
        vec4 Lo_New = vec4(0.f, 0.f, 0.f, 0.f);        

        if (nextRand(randSeed) < weight / reservoirNew.x) 
        {
            giSamplesPos_New = giSamplesPos;
            giSamplesNorm_New = giSamplesNorm;
            Lo_New = Lo;
        }

        float lightSamplesCount = reservoir.z;

        ivec2 neighborOffset;
		ivec2	neighborIndex;

		int neighborsCount = 15;
		int neighborsRange = 5; // Want to sample neighbors within [-neighborsRange, neighborsRange] offset

		const float dist_threshold = 0.01f;
    	const float angle_threshold = 25.f * M_PI / 180.f;
		
		vec4 reservoirNeighbor = vec4(0.f, 0.f, 0.f, 0.f);
        vec4 giSamplesPos_Neighbor = vec4(0.f, 0.f, 0.f, 0.f);
        vec4 giSamplesNorm_Neighbor = vec4(0.f, 0.f, 0.f, 0.f);   
        vec4 Lo_Neighbor = vec4(0.f, 0.f, 0.f, 0.f);

		VbufferExtraCommonData vbufferData_Neighbor;
        vec3 worldPos_Neighbor;
		vec3 worldNorm_Neighbor;
		vec2 uv_Neighbor;	  

		for (int i = 0; i < neighborsCount; i++) {
			// Reservoir reminder:
			// .x: weight sum
			// .y: chosen light for the pixel
			// .z: the number of samples seen for this current light
			// .w: the final adjusted weight for the current pixel following the formula in algorithm 3 (r.W)

			// Generate a random number from range [0, 2 * neighborsRange] then offset in negative direction 
			// by spatialNeighborCount to get range [-neighborsRange, neighborsRange]. 
			// Need to take care of out of bound case hence the max and min
			neighborOffset.x = int(nextRand(randSeed) * float(neighborsRange * 2)) - neighborsRange;
			neighborOffset.y = int(nextRand(randSeed) * float(neighborsRange * 2)) - neighborsRange;

			neighborIndex.x = max(0, min(int(gl_LaunchSizeEXT.x) - 1, int(gl_LaunchIDEXT.x) + neighborOffset.x));
			neighborIndex.y = max(0, min(int(gl_LaunchSizeEXT.y) - 1, int(gl_LaunchIDEXT.y) + neighborOffset.y));

			reservoirNeighbor  = imageLoad(reservoir_GI_Curr, neighborIndex);
			Lo_Neighbor = imageLoad(indirectLoCurrInput, neighborIndex);
			giSamplesPos_Neighbor = imageLoad(giSamplesPosCurrInput, neighborIndex);
			giSamplesNorm_Neighbor = imageLoad(giSamplesNormCurrInput, neighborIndex);
		
			if (length(giSamplesNorm_Neighbor) == 0)
				continue;

			objectID_meshletsID_primitiveID = unpackVBuffer(imageLoad(vbufferTex, ivec2(neighborIndex)).xy);
    		objIDf = float(objectID_meshletsID_primitiveID.x) - 1.f;

			if (objIDf <= 0.f)
				continue;

			uv_Neighbor = vec2(neighborIndex)/vec2(gl_LaunchSizeEXT.xy);
            ndc = uv_Neighbor * 2.0 - 1.0;		

			vbufferData_Neighbor = proccessVbufferData(objectID_meshletsID_primitiveID, giParams.projView, ndc, gl_LaunchSizeEXT.xy, giParams.camPos.xyz);

			worldPos_Neighbor = vbufferData_Neighbor.worldPos;
			worldNorm_Neighbor = vbufferData_Neighbor.worldNorm;	

			// Geometric similarity
			float dist = dot(worldPos_Neighbor.xyz - worldPos.xyz, worldPos_Neighbor.xyz - worldPos.xyz);
			if (dist > dist_threshold ||
				(dot(worldNorm_Neighbor.xyz, worldNorm.xyz)) < cos(angle_threshold)) {
					continue;
			}	

            // target_pdf of the light is f * Le * G / pdf
			target_pdf = length(Lo_Neighbor.xyz);

			// //check visibility
			// vec3 wi = giSamplesPos_Neighbor.xyz - worldPos.xyz;
			// const float wi_len = length(wi);
			// wi /= wi_len;

			// float shadowColor = shadowRayVisibility(worldPos.xyz, wi, wi_len, giParams.shadowMult);
			// if (shadowColor < 0.001f) {
			// 	target_pdf = 0.f;
			// }			

			// Calculate Jacobian
			vec3 w_qq = worldPos.xyz - giSamplesPos.xyz;
			const float w_qq_len = length(w_qq);
			w_qq /= w_qq_len;
			vec3 w_rq = worldPos_Neighbor.xyz - giSamplesPos.xyz;
			const float w_rq_len = length(w_rq);
			w_rq /= w_rq_len;
			const float qq = w_qq_len * w_qq_len;
			const float rq = w_rq_len * w_rq_len;
			const float div = rq * abs(dot(w_qq, giSamplesNorm.xyz));
			target_pdf *= div == 0 ? 0 : abs(dot(w_rq, giSamplesNorm.xyz)) * qq / div;					

			weight = target_pdf * reservoirNeighbor.w * reservoirNeighbor.z;

			reservoirNew.x += weight;
			reservoirNew.z += 1.f;       

			if (nextRand(randSeed) < weight / reservoirNew.x) 
			{
				giSamplesPos_New = giSamplesPos_Neighbor;
				giSamplesNorm_New = giSamplesNorm_Neighbor;
				Lo_New = Lo;
			}

			lightSamplesCount += reservoirNeighbor.z;
		} 

 		// Update the correct number of candidates considered for this pixel
		reservoirNew.z = lightSamplesCount;              

        // Evaluate visibility for initial candidate and set r.W value
		// target_pdf of the light is f * Le * G / pdf
		target_pdf = length(Lo_New.xyz);
		weight = target_pdf * reservoirNew.w * reservoirNew.z;
		reservoirNew.w = target_pdf * reservoirNew.z == 0.f ? 0.f : reservoirNew.x / max(target_pdf * reservoirNew.z, 0.0001f);

        Lo = Lo_New;
        giSamplesPos = giSamplesPos_New;
        giSamplesNorm = giSamplesNorm_New;   
	}

    imageStore(reservoir_GI_Spatial, ivec2(gl_LaunchIDEXT.xy), reservoirNew);

    imageStore(indirectLoSpatialOutput, ivec2(gl_LaunchIDEXT.xy), Lo);
    imageStore(giSamplesPosSpatialOutput, ivec2(gl_LaunchIDEXT.xy), giSamplesPos);
    imageStore(giSamplesNormSpatialOutput, ivec2(gl_LaunchIDEXT.xy), giSamplesNorm);
}
