#version 460

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_NV_mesh_shader: require

#extension GL_GOOGLE_include_directive: require

#extension GL_ARB_shader_draw_parameters: require

#include "meshlets.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform  CameraBuffer{
	mat4 view;
	mat4 proj;
	mat4 viewproj;
	vec4 frustum[6];
	float pyramidWidth;
	float pyramidHeight;
	float znear;
} cameraData;

layout(binding = 1) uniform sampler2D depthPyramid;

layout(std140, binding = 2) readonly buffer ObjectBuffer{

	ObjectData objects[];
} objectBuffer;

layout (set = 1, binding = 1) readonly buffer _meshlets
{
	s_meshlet meshlets[];
};

out taskNV block
{
	uint meshletIndices[32];
};

shared uint meshletCount;

#define FRUSTUM_CULL 0
#define OCCLUSION_CULL 1

bool frustumCulling(uint mi, mat4 modelMatrix);

bool occlusionCulling(uint mi, mat4 modelMatrix);

bool projectSphereView(vec3 c, float r, float znear, float P00, float P11, out vec4 aabb);

void main()
{
	uint ti = gl_LocalInvocationID.x;
	uint mgi = gl_WorkGroupID.x;
	uint mi = mgi * 32 + ti; 

	meshletCount = 0;

	memoryBarrierShared();

	mat4 modelMatrix = objectBuffer.objects[gl_DrawID].model;
	if (frustumCulling(mi, modelMatrix) && occlusionCulling(mi, modelMatrix))
	{
		uint index = atomicAdd(meshletCount, 1);

		meshletIndices[index] = mi;
	}

	memoryBarrierShared();

	if (ti == 0)
		gl_TaskCountNV = meshletCount;
}

bool frustumCulling(uint mi, mat4 modelMatrix)
{
	float cr[4] = meshlets[mi].center_radius;
	vec3 center = vec3(cr[0], cr[1], cr[2]);
	center = vec3(modelMatrix * vec4(center, 1.));
	float radius = cr[3];

	bool visible = true;
	for (int i = 0; i < 6; ++i)
	{
		visible = visible && dot(cameraData.frustum[i], vec4(center, 1)) > -radius;
	}

	return visible;
}

bool occlusionCulling(uint mi, mat4 modelMatrix)
{
    float cr[4] = meshlets[mi].center_radius;
	vec3 center = vec3(cr[0], cr[1], cr[2]);
	center = vec3(modelMatrix * vec4(center, 1.));
	center = vec3(cameraData.view * vec4(center, 1.));
	float radius = cr[3];

	float P00 = cameraData.proj[0][0], P11 = cameraData.proj[1][1];

	vec4 aabb;
	if (projectSphereView(center, radius, cameraData.znear, P00, P11, aabb))
	{

		float width = (aabb.z - aabb.x) * cameraData.pyramidWidth;
		float height = (aabb.w - aabb.y) * cameraData.pyramidHeight;

		float level = floor(log2(max(width, height)));

		// Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
		float depth = textureLod(depthPyramid, (aabb.xy + aabb.zw) * 0.5, level).x;
		float depthSphere = cameraData.znear / (center.z - radius);

		return depthSphere > depth;
	}
	return true;
}