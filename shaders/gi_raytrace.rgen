#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"
#include "vbuffer.h"

layout(location = 0) rayPayloadEXT IndirectRayPayload indirectRpl;
layout(location = 1) rayPayloadEXT AORayPayload aoRpl;

layout (set = 0, std140, binding = 0) readonly buffer _vertices
{
	SVertex vertices[];
} Vertices[];

layout(set = 0, binding = 1) uniform sampler2D texSet[];
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, std140, binding = 3) readonly buffer ObjectBuffer{

	SObjectData objects[];
} objectBuffer;

layout (set = 0, binding = 4) readonly buffer _meshlets
{
	SMeshlet meshlets[];
} Meshlet[];

layout(set = 0, binding = 5) readonly buffer _meshletData
{
	uint meshletData[];
} MeshletData[];

layout(set = 0, std140, binding = 6) readonly buffer _Lights{

	SLight lights[];
} lightsBuffer;

layout(set = 0, binding = 8) uniform samplerCube irradianceMap;
layout(set = 0, binding = 9) uniform samplerCube prefilteredMap;
layout(set = 0, binding = 10) uniform sampler2D   brdfLUT;

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };
layout(set = 1, binding = 1, rg32ui) uniform  readonly uimage2D vbufferTex;

layout(set = 2, binding = 0, rgba16f) uniform image2D reservoir_Init;
layout(set = 2, binding = 1, rgba16f) uniform image2D indirectLoInitOutput;
layout(set = 2, binding = 2, rgba32f) uniform image2D giSamplesPosInitOutput;
layout(set = 2, binding = 3, rgba32f) uniform image2D giSamplesNormInitOutput;


#include "gi_raytrace_func.h"

void main() 
{
    const vec2 uv = vec2(gl_LaunchIDEXT.xy)/vec2(gl_LaunchSizeEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

    uvec3 objectID_meshletsID_primitiveID = unpackVBuffer(imageLoad(vbufferTex, ivec2(gl_LaunchIDEXT.xy)).xy);
    float objIDf = float(objectID_meshletsID_primitiveID.x) - 1.f;

    vec4 indirectColor = vec4(0.f, 0.f, 0.f, 1.f);

    vec4 giSamplesPos = vec4(0.f, 0.f, 0.f, 0.f);
    vec4 giSamplesNorm = vec4(0.f, 0.f, 0.f, 0.f);

    if (objIDf >= 0.)
	{
        vec2 ndc = uv * 2.0 - 1.0;

        VbufferExtraCommonData vbufferData = proccessVbufferData(objectID_meshletsID_primitiveID, giParams.projView, ndc, gl_LaunchSizeEXT.xy, giParams.camPos.xyz);

        vec3 worldPos = vbufferData.worldPos;
        vec3 worldNorm = vbufferData.worldNorm;
        vec2 uvCoord = vbufferData.uvCoord;

        // Initialize a random seed, per-pixel, based on a screen position and temporally varying count
	    uint randSeed = initRand(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, giParams.frameCount);

        DirectInputData inputData = packDirectInputData(objIDf, worldPos.xyz, worldNorm, uvCoord);

        // Reservoir reminder:
        // .x: weight sum
        // .y: chosen light for the pixel
        // .z: the number of samples seen for this current light
        // .w: the final adjusted weight for the current pixel following the formula in algorithm 3 (r.W)        

        vec4 reservoir = vec4(0.f, 0.f, 0.f, 0.f);
        float target_pdf;

        uint lightToSample = 1;
        float shadowColor = 0.f;

        PBRShadeData prbSD = getShadeData(inputData);

        DirectOutputData outputCurrentData;

		// Generate Initial Candidates
		for (int i = 0; i < min(giParams.lightsCount, 32); i++) {
            lightToSample = min( uint(nextRand(randSeed) * giParams.lightsCount),
                        giParams.lightsCount - 1u );

            outputCurrentData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, false);

            // target_pdf of the light is f * Le * G / pdf
            target_pdf = length(unpackLo_DirectOutputData(outputCurrentData));
            reservoir = updateReservoir(randSeed, reservoir, lightToSample, target_pdf);
		};

		// Evaluate visibility for initial candidate and set r.W value
		lightToSample = uint(reservoir.y);
        outputCurrentData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, false);

        // target_pdf of the light is f * Le * G / pdf
        target_pdf = length(unpackLo_DirectOutputData(outputCurrentData));
		reservoir.w = (1.f / max(target_pdf, 0.0001f)) * (reservoir.x / max(reservoir.z, 0.0001f));

        {
            SLight lightInfo = lightsBuffer.lights[lightToSample];

            vec3 lightDir = lightInfo.position.xyz - worldPos.xyz;
            // Avoid NaN
            float distSquared = dot(lightDir, lightDir);
            float lightDistance = (distSquared > 1e-5f) ? length(lightDir) : 0.f;
            lightDir = (distSquared > 1e-5f) ? normalize(lightDir) : vec3(0.f, 0.f, 0.f);

            float shadowColor = shadowRayVisibility(worldPos.xyz, lightDir, lightDistance, giParams.shadowMult);
            if (shadowColor < 0.001f) {
                reservoir.w = 0.f;
            }
        }

        indirectColor.w = target_pdf;
        imageStore(reservoir_Init, ivec2(gl_LaunchIDEXT.xy), reservoir);

        bool bRestirGI_ON = (giParams.mode & (1u << 1)) > 0;

        uint INDIRECT_BOUND = giParams.numRays;
        //INDIRECT ILLUMINATION
        for (int i = 0; i < INDIRECT_BOUND; i++)
        {   
            vec3 outputCurrentData_worldNorm = unpackWorldNorm_DirectOutputData(outputCurrentData);
            float outputCurrentData_roughness = unpackRoughness_DirectOutputData(outputCurrentData);
            float outputCurrentData_metalness = unpackMetalness_DirectOutputData(outputCurrentData);
            vec3 outputCurrentData_albedo = unpackAlbedo_DirectOutputData(outputCurrentData);
            vec3 outputCurrentData_F0 = unpackF0_DirectOutputData(outputCurrentData);

            vec3 viewDir = normalize(giParams.camPos.xyz - worldPos.xyz);
            vec3 H = getGGXMicrofacet(randSeed, outputCurrentData_roughness, outputCurrentData_worldNorm);

            vec3 R = normalize(2.f * dot(viewDir, H) * H - viewDir);

            IndirectRayPayload indirPayload =  shootIndirectRay(worldPos.xyz, R);

            // Check to make sure our randomly selected, normal mapped diffuse ray didn't go below the surface
            if (dot(outputCurrentData_worldNorm, R) < 0)
                break;

            int objectId = unpackObjID_IndirectRayPayload(indirPayload);
            if (objectId <= 0)
            {
                //hit miss
                const float MAX_REFLECTION_LOD = 9;
                vec3 prefilteredColor = textureLod(prefilteredMap, R,  outputCurrentData_roughness * MAX_REFLECTION_LOD).rgb;

                float NdotV = max(dot(outputCurrentData_worldNorm, viewDir), 0.0);

                // ambient lighting (we now use IBL as the ambient term)
                vec3 kS = fresnelSchlickRoughness(NdotV, outputCurrentData_F0, outputCurrentData_roughness);
                vec2 envBRDF  = texture(brdfLUT, vec2(NdotV, outputCurrentData_roughness)).rg;
                vec3 specular = prefilteredColor * (kS * envBRDF.x + envBRDF.y);
                vec3 kD = 1.0 - kS;
                kD *= 1.0 - outputCurrentData_metalness;	  
                vec3 irradiance = texture(irradianceMap, outputCurrentData_worldNorm).rgb;
                vec3 diffuse      = irradiance * outputCurrentData_albedo;
                vec3 ambient = (kD * diffuse + specular);

                indirectColor.xyz += ambient;

                break;
            }
            else
            {
                //closest hit               
                const vec3 wo = -R;
                vec3 shading_nrm = normalize(unpackWorldNormShading_IndirectRayPayload(indirPayload));
                vec3 geometry_nrm = unpackWorldNormGeometry_IndirectRayPayload(indirPayload);
                if (dot(geometry_nrm, wo) <= 0.)
                    geometry_nrm = -geometry_nrm;
                if (dot(geometry_nrm, shading_nrm) <= 0)
                    shading_nrm = -shading_nrm;

                if (i == 0)
                {
                    giSamplesPos.xyz = unpackWorldPos_IndirectRayPayload(indirPayload);
                    giSamplesNorm.xyz = shading_nrm;
                }                                    

                DirectInputData input2Data = packDirectInputData(objectId,
                    unpackWorldPos_IndirectRayPayload(indirPayload), 
                    shading_nrm, 
                    unpackUV_IndirectRayPayload(indirPayload));

                prbSD = getShadeData(input2Data);    

                DirectOutputData outputBoundData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, !bRestirGI_ON);

                // Compute some dot products needed for shading
                float  NdotR = clamp(dot(outputCurrentData_worldNorm, R), 0.f, 1.f);
                float  NdotV = clamp(dot(outputCurrentData_worldNorm, viewDir), 0.f, 1.f);

                float  NdotH = clamp(dot(outputCurrentData_worldNorm, H), 0.f, 1.f);
                float  RdotH = clamp(dot(R, H), 0.f, 1.f);

                // What's the probability of sampling vector H from getGGXMicrofacet()?
                float  D = ggxNormalDistribution(NdotH, outputCurrentData_roughness);          // The GGX normal distribution
                float  ggxProb = D * NdotH / (4.f * RdotH);

                // Evaluate our BRDF using a microfacet BRDF model
                float  G = IndirectGeometrySmith(outputCurrentData_worldNorm, viewDir, R, outputCurrentData_roughness);   // Use Schlick's masking term approx
                vec3 F = fresnelSchlick(RdotH, outputCurrentData_F0);  // Use Schlick's approx to Fresnel
                vec3 ggxTerm = D * G * F / (4.f * NdotR * NdotV + 0.001); // The Cook-Torrance microfacet BRDF

                vec3 kS = F;
                vec3 kD = 1.0 - kS;
                kD *= 1.0 - outputCurrentData_metalness;
                indirectColor.xyz +=  NdotR * float(giParams.lightsCount) * unpackLo_DirectOutputData(outputBoundData) * (kD *unpackAlbedo_DirectOutputData(outputBoundData) * M_INV_PI + ggxTerm / max(1e-3, ggxProb));
             
                //for next bound
                worldPos.xyz = unpackWorldPos_IndirectRayPayload(indirPayload);
                outputCurrentData = outputBoundData;  
            }
        }
	}


    imageStore(indirectLoInitOutput, ivec2(gl_LaunchIDEXT.xy), indirectColor);
    imageStore(giSamplesPosInitOutput, ivec2(gl_LaunchIDEXT.xy), giSamplesPos);
    imageStore(giSamplesNormInitOutput, ivec2(gl_LaunchIDEXT.xy), giSamplesNorm);
}
