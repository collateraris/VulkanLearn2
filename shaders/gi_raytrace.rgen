#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"

layout(location = 0) rayPayloadEXT IndirectRayPayload indirectRpl;
layout(location = 1) rayPayloadEXT AORayPayload aoRpl;

layout(set = 0, binding = 1) uniform sampler2D texSet[];
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };

layout(set = 1, binding = 1) readonly buffer _Lights{

	SLight lights[];
} lightsBuffer;

layout(set = 1, binding = 2) readonly buffer ObjectBuffer{

	SObjectData objects[];
} objectBuffer;


layout(set = 2, binding = 0, rgba32f) uniform image2D outputImage;

layout(set = 3, binding = 0) uniform sampler2D wposTex;
layout(set = 3, binding = 1) uniform sampler2D normalTex;
layout(set = 3, binding = 2) uniform sampler2D uvTex;
layout(set = 3, binding = 3) uniform sampler2D objIDTex;
layout(set = 3, binding = 4) uniform samplerCube samplerEnv;


#include "gi_raytrace_func.h"

void main() 
{
    const vec2 uv = vec2(gl_LaunchIDEXT.xy)/vec2(gl_LaunchSizeEXT.xy);
    vec4 worldPos = texture(wposTex, uv).rgba;
    vec3 worldNorm = normalize(texture(normalTex, uv).rgb);

    SLight sunInfo = lightsBuffer.lights[0];

    vec3 shadeColor = vec3(1., 0., 1.);

    if (worldPos.w != 0.0f)
	{
        float objIDf = texture(objIDTex, uv).r;
        uint objID = uint(objIDf);
        SObjectData shadeData = objectBuffer.objects[objID];
        vec2 gbufferTexCoord = texture(uvTex, uv).rg;

        vec3 albedo = texture(texSet[shadeData.diffuseTexIndex], gbufferTexCoord).rgb;

        vec3 emission = vec3(0., 0., 0);
        if (shadeData.emissionTexIndex > 0)
            emission = texture(texSet[shadeData.emissionTexIndex], gbufferTexCoord).rgb;

        float roughness = 1.;
	    if (shadeData.roughnessTexIndex > 0)
		    roughness = texture(texSet[shadeData.roughnessTexIndex], gbufferTexCoord).g; 

        if (shadeData.normalTexIndex > 0)
        {
            mat3 TBN = getTBN(worldNorm);
            vec3 normal = texture(texSet[shadeData.normalTexIndex], gbufferTexCoord).rgb;
            normal = normalize(normal * 2.0 - 1.0);   
            worldNorm = normalize(TBN * normal);
        }  

        shadeColor = emission;   

        // Initialize a random seed, per-pixel, based on a screen position and temporally varying count
	    uint randSeed = initRand(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, giParams.frameCount);

        vec3 lightDir = normalize(-sunInfo.direction.xyz);
	    vec3 viewDir = normalize(giParams.camPos.xyz - worldPos.xyz);
        vec3 F0 = vec3(0.04); 

        shadeColor += ggxDirect(randSeed, shadeData, gbufferTexCoord, worldPos.xyz, worldNorm.xyz, giParams.camPos.xyz, albedo, roughness, lightDir, viewDir, sunInfo.color.xyz, F0);


        //INDIRECT ILLUMINATIO

        shadeColor += ggxIndirect(randSeed, worldPos.xyz, worldNorm.xyz, giParams.camPos.xyz, albedo, roughness, lightDir, viewDir, F0);
        //shadeColor = vec3(aoColor, aoColor, aoColor);
        //hadeColor = vec3(roughness, roughness, roughness);
	}
    else
    {
        shadeColor = textureLod(samplerEnv, vec3(uv, 1.f), 1.f).rgb;
    }


    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(shadeColor, 1.0f));
}
