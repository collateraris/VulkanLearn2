#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier:enable
#extension GL_GOOGLE_include_directive : enable

#include "gi_raytrace.h"
#include "vbuffer.h"

layout(location = 0) rayPayloadEXT IndirectRayPayload indirectRpl;
layout(location = 1) rayPayloadEXT AORayPayload aoRpl;

layout (set = 0, std140, binding = 0) readonly buffer _vertices
{
	SVertex vertices[];
} Vertices[];

layout(set = 0, binding = 1) uniform sampler2D texSet[];
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 3) readonly buffer ObjectBuffer{

	SObjectData objects[];
} objectBuffer;

layout(set = 1, binding = 0) uniform _GlobalGIParams { SGlobalGIParams giParams; };

layout(set = 1, binding = 1) readonly buffer _Lights{

	SLight lights[];
} lightsBuffer;

layout(set = 1, binding = 3, rg32ui) uniform  readonly uimage2D vbufferTex;

layout(set = 2, binding = 0) uniform sampler2D reservoirCurr;
layout(set = 2, binding = 1, rgba32f) uniform image2D spatialReuse;

layout(set = 3, binding = 0) uniform samplerCube irradianceMap;
layout(set = 3, binding = 1) uniform samplerCube prefilteredMap;
layout(set = 3, binding = 2) uniform sampler2D   brdfLUT;


#include "gi_raytrace_func.h"

void main() 
{
    vec4 reservoirNew = vec4(0.f, 0.f, 0.f, 0.f);

    const vec2 uv = vec2(gl_LaunchIDEXT.xy)/vec2(gl_LaunchSizeEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

    uvec2 objectID_vertexID = imageLoad(vbufferTex, ivec2(gl_LaunchIDEXT.xy)).xy;
    float objIDf = float(objectID_vertexID.x) - 1.f;

    vec3 indirectColor = vec3(0.f, 0.f, 0.f);

    if (objIDf >= 0.)
	{
        vec2 ndc = uv * 2.0 - 1.0;

        VbufferExtraCommonData vbufferData = proccessVbufferData(objectID_vertexID, giParams.projView, ndc, gl_LaunchSizeEXT.xy);

        vec3 worldPos = vbufferData.worldPos;
        vec3 worldNorm = vbufferData.worldNorm;
        vec2 uvCoord = vbufferData.uvCoord;

        // Initialize a random seed, per-pixel, based on a screen position and temporally varying count
	    uint randSeed = initRand(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, giParams.frameCount);

        DirectInputData inputData = packDirectInputData(objIDf, worldPos.xyz, worldNorm, uvCoord);

        vec4 reservoir = texture(reservoirCurr, uv).rgba;
        uint lightToSample = uint(reservoir.y);

        PBRShadeData prbSD = getShadeData(inputData);
        DirectOutputData outputCurrentData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, false);
        // p_hat of the light is f * Le * G / pdf
        float p_hat = length(unpackLo_DirectOutputData(outputCurrentData));
        // // reservoir.w = weight
	    //reservoir.z = r.M
        reservoirNew = updateReservoir(randSeed, reservoirNew, lightToSample, p_hat * reservoir.w * reservoir.z);

        float lightSamplesCount = reservoir.z;

        uvec2 neighborOffset;
		uvec2	neighborIndex;
		vec4 neighborReservoir;

		int neighborsCount = 15;
		int neighborsRange = 5; // Want to sample neighbors within [-neighborsRange, neighborsRange] offset

		for (int i = 0; i < neighborsCount; i++) {
			// Reservoir reminder:
			// .x: weight sum
			// .y: chosen light for the pixel
			// .z: the number of samples seen for this current light
			// .w: the final adjusted weight for the current pixel following the formula in algorithm 3 (r.W)

			// Generate a random number from range [0, 2 * neighborsRange] then offset in negative direction 
			// by spatialNeighborCount to get range [-neighborsRange, neighborsRange]. 
			// Need to take care of out of bound case hence the max and min
			neighborOffset.x = int(nextRand(randSeed) * neighborsRange * 2.f) - neighborsRange;
			neighborOffset.y = int(nextRand(randSeed) * neighborsRange * 2.f) - neighborsRange;

			neighborIndex.x = max(0, min(gl_LaunchSizeEXT.x - 1, gl_LaunchIDEXT.x + neighborOffset.x));
			neighborIndex.y = max(0, min(gl_LaunchSizeEXT.y - 1, gl_LaunchIDEXT.y + neighborOffset.y));

			neighborReservoir = texture(reservoirCurr, ivec2(neighborIndex)).rgba;
            lightToSample = uint(neighborReservoir.y);

            DirectOutputData outputCurrentData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, false);
            // p_hat of the light is f * Le * G / pdf
            float p_hat = length(unpackLo_DirectOutputData(outputCurrentData));

			reservoirNew = updateReservoir(randSeed, reservoirNew, lightToSample, p_hat * neighborReservoir.w * neighborReservoir.z);

			lightSamplesCount += neighborReservoir.z;
		} 

 		// Update the correct number of candidates considered for this pixel
		reservoirNew.z = lightSamplesCount;              

        // Evaluate visibility for initial candidate and set r.W value
		lightToSample = uint(reservoirNew.y);
        outputCurrentData = ggxDirect(lightToSample, prbSD, giParams.camPos.xyz, false);

        // p_hat of the light is f * Le * G / pdf
        p_hat = length(unpackLo_DirectOutputData(outputCurrentData));
		reservoirNew.w = (1.f / max(p_hat, 0.0001f)) * (reservoirNew.x / max(reservoirNew.z, 0.0001f));
	}

    imageStore(spatialReuse, ivec2(gl_LaunchIDEXT.xy), reservoirNew);
}
