#version 460

#extension GL_NV_mesh_shader : require

layout(local_size_x = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 42) out;

struct s_vertex
{
	vec3 position;
	vec3 normal;
	vec2 uv;
};

layout (set = 1, binding = 0) buffer _vertices
{
	s_vertex vertices[];
};

struct s_meshlet
{
	uint vertices[64];
	uint indices[126];
	uint vertexCount;
	uint indexCount;
};

layout (set = 1, binding = 1) buffer _meshlets
{
	s_meshlet meshlets[];
};

// Custom vertex output block
layout (location = 0) out PerVertexData
{
  vec4 color;
} v_out[];   // [max_vertices]

void main()
{
	uint mi = gl_WorkGroupID.x;

	// TODO: really bad for perf; our workgroup has 1 thread!
	for (uint i = 0; i < uint(meshlets[mi].vertexCount); ++i)
	{
		uint vi = meshlets[mi].vertices[i];

		vec3 position = vertices[vi].position;
		vec3 normal = vertices[vi].normal;
		vec2 texcoord = vertices[vi].uv;

		gl_MeshVerticesNV[i].gl_Position = vec4(position * vec3(1, 1, 0.5) + vec3(0, 0, 0.5), 1.0);
		v_out[i].color = vec4(normal * 0.5 + vec3(0.5), 1.0);
	}

    gl_PrimitiveCountNV = uint(meshlets[mi].indexCount) / 3;

    // TODO: really bad for perf; our workgroup has 1 thread!
    for (uint i = 0; i < uint(meshlets[mi].indexCount); ++i)
    {
      // TODO: possibly bad for perf, consider writePackedPrimitiveIndices4x8NV
      gl_PrimitiveIndicesNV[i] = uint(meshlets[mi].indices[i]);
    }
}