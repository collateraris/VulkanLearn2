#version 460

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_NV_mesh_shader: require

#extension GL_GOOGLE_include_directive: require

#extension GL_ARB_shader_draw_parameters: require

#include "meshlets.h"

#define DEBUG 1

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

layout(set = 1, binding = 0) uniform  CameraBuffer{
	mat4 view;
	mat4 proj;
	mat4 viewproj;
	vec4 frustum[6];
	float pyramidWidth;
	float pyramidHeight;
	float znear;
} cameraData;

layout(set = 1, binding = 1) uniform sampler2D depthPyramid;

layout(set = 1, std140, binding = 2) readonly buffer ObjectBuffer{

	ObjectData objects[];
} objectBuffer;

layout (set = 0, binding = 0) readonly buffer _vertices
{
	s_vertex vertices[];
} Vertex[];

layout (set = 0, binding = 1) readonly buffer _meshlets
{
	s_meshlet meshlets[];
} Meshlet[];

layout(set = 0, binding = 2) readonly buffer _meshletData
{
	uint meshletData[];
} MeshletData[];

in taskNV block
{
	uint meshletIndices[32];
};

// Custom vertex output block
layout (location = 0) out PerVertexData
{
  vec4 color;
  vec2 texCoord;
  flat uint diffuseTexIndex;
} v_out[];   // [max_vertices]

uint hash(uint a)
{
   a = (a+0x7ed55d16) + (a<<12);
   a = (a^0xc761c23c) ^ (a>>19);
   a = (a+0x165667b1) + (a<<5);
   a = (a+0xd3a2646c) ^ (a<<9);
   a = (a+0xfd7046c5) + (a<<3);
   a = (a^0xb55a4f09) ^ (a>>16);
   return a;
}

void main()
{
	uint mi = meshletIndices[gl_WorkGroupID.x];
	uint ti = gl_LocalInvocationID.x;

	mat4 modelMatrix = objectBuffer.objects[gl_DrawID].model;
	uint meshletIndex = objectBuffer.objects[gl_DrawID].meshIndex;
	s_meshlet currMeshlet = Meshlet[meshletIndex].meshlets[mi];

	uint diffuseTexIndex = objectBuffer.objects[gl_DrawID].diffuseTexIndex;

	uint vertexCount = uint(currMeshlet.vertexCount);
	uint triangleCount = uint(currMeshlet.triangleCount);
	uint indexCount = triangleCount * 3;

	uint dataOffset = currMeshlet.dataOffset;
	uint vertexOffset = dataOffset;
	uint indexOffset = dataOffset + vertexCount;

#if DEBUG
	uint mhash = hash(mi);
	vec3 mcolor = vec3(float(mhash & 255), float((mhash >> 8) & 255), float((mhash >> 16) & 255)) / 255.0;
#endif

	// TODO: if we have meshlets with 62 or 63 vertices then we pay a small penalty for branch divergence here - we can instead redundantly xform the last vertex
	for (uint i = ti; i < vertexCount; i += 32)
	{
		uint vi = MeshletData[meshletIndex].meshletData[vertexOffset + i];
		s_vertex vert = Vertex[meshletIndex].vertices[vi];

		vec3 position = vec3(vert.vx, vert.vy, vert.vz);
		vec3 normal = vec3(int(vert.nx), int(vert.ny), int(vert.nz)) / 127.0 - 1.0;
		vec2 texcoord = vec2(vert.tu, vert.tv);

		position = vec3(modelMatrix * vec4(position, 1.0f));

		gl_MeshVerticesNV[i].gl_Position = cameraData.viewproj * vec4(position, 1.0f);
		v_out[i].color = vec4(1.0, 1.0, 1.0, 1.0);
		v_out[i].texCoord = texcoord;
		v_out[i].diffuseTexIndex = diffuseTexIndex;

	#if DEBUG
		v_out[i].color = vec4(mcolor, 1.0);
	#endif		
	}

    for (uint i = ti; i < indexCount; i += 32)
	{
		// TODO: We tried to use writePackedPrimitiveIndices4x8NV, it wasn't giving us better perf
		// We are currently writing one byte from each thread of a warp, which seems like it's bad for perf (bank conflicts etc.) but GPU doesn't seem to care much?
		gl_PrimitiveIndicesNV[i] = uint(MeshletData[meshletIndex].meshletData[indexOffset + i]);
	}

	if (ti == 0)
		gl_PrimitiveCountNV = uint(currMeshlet.triangleCount);
}