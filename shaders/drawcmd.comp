#version 450

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require

#extension GL_GOOGLE_include_directive: require

#include "meshlets.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform block
{
	vec4 frustum[6];
};

layout(std140, binding = 0) readonly buffer ObjectBuffer{

	ObjectData objects[];
} objectBuffer;

layout(binding = 1) writeonly buffer DrawCommands
{
	MeshDrawCommand drawCommands[];
};

#define FRUSTUM_CULL 1

bool frustumCulling(uint di);

void main()
{
	uint ti = gl_LocalInvocationID.x;
	uint gi = gl_WorkGroupID.x;
	uint di = gi * 32 + ti;
#if FRUSTUM_CULL
	bool visible = frustumCulling(di);
#else
	bool visible = true;
#endif
	drawCommands[di].taskCount = visible ? (objectBuffer.objects[di].meshletCount + 31) / 32 : 0;
	drawCommands[di].firstTask = 0;
}

bool frustumCulling(uint di)
{
	vec3 center = objectBuffer.objects[di].center_radius.xyz;
	float radius = objectBuffer.objects[di].center_radius.w;

	bool visible = false;
	for (int i = 0; i < 6; ++i)
	{
		visible = visible || dot(frustum[i], vec4(center, 1)) > -radius;
	}

	return visible;
}