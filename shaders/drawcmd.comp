#version 450

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require

#extension GL_GOOGLE_include_directive: require

#include "meshlets.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) readonly buffer ObjectBuffer{

	ObjectData objects[];
} objectBuffer;

layout(binding = 1) writeonly buffer DrawCommands
{
	MeshDrawCommand drawCommands[];
};

layout(binding = 2) uniform  CameraBuffer{
	mat4 view;
	mat4 proj;
	mat4 viewproj;
	vec4 frustum[6];
	float pyramidWidth;
	float pyramidHeight;
	float znear;
} cameraData;

layout(binding = 3) uniform sampler2D depthPyramid;

#define FRUSTUM_CULL 1
#define OCCLUSION_CULL 1

bool frustumCulling(uint di);

bool occlusionCulling(uint di);

void main()
{
	uint ti = gl_LocalInvocationID.x;
	uint gi = gl_WorkGroupID.x;
	uint di = gi * 32 + ti;

	bool visible =  frustumCulling(di) && occlusionCulling(di);

	drawCommands[di].taskCount = visible ? (objectBuffer.objects[di].meshletCount + 31) / 32 : 0;
	drawCommands[di].firstTask = 0;
}

bool frustumCulling(uint di)
{
	vec3 center = objectBuffer.objects[di].center_radius.xyz;
	float radius = objectBuffer.objects[di].center_radius.w;

	bool visible = true;
	for (int i = 0; i < 6; ++i)
	{
		visible = visible && dot(cameraData.frustum[i], vec4(center, 1)) > -radius;
	}

	return visible;
}

bool occlusionCulling(uint di)
{
	vec3 center = vec3(cameraData.view * vec4(objectBuffer.objects[di].center_radius.xyz, 1.f));
	float radius = objectBuffer.objects[di].center_radius.w;

	float P00 = cameraData.proj[0][0], P11 = cameraData.proj[1][1];

	vec4 aabb;
	if (projectSphereView(center, radius, cameraData.znear, P00, P11, aabb))
	{

		float width = (aabb.z - aabb.x) * cameraData.pyramidWidth;
		float height = (aabb.w - aabb.y) * cameraData.pyramidHeight;

		float level = floor(log2(max(width, height)));

		// Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
		float depth = textureLod(depthPyramid, (aabb.xy + aabb.zw) * 0.5, level).x;
		float depthSphere = cameraData.znear / (center.z - radius);

		return depthSphere > depth;
	}
	return true;
}